#!/usr/bin/env dash

new_display=$1 # Either "lap" or "mon"
# shellcheck disable=SC2154
display_cfg="$XDG_DATA_HOME/computer_state/current_display"

if [ -z "$new_display" ]; then
	old_display=$(cat "$display_cfg")
	if [ "$old_display" = "mon" ]; then
		new_display="lap"
	elif [ "$old_display" = "lap" ]; then
		new_display="mon"
	fi
	echo "Switching from $old_display to $new_display"
fi

# Save $new_display to $display_cfg for if switch_display is called again without args
echo "$new_display" >"$display_cfg"

# KDE Fonts
if [ "$new_display" = "mon" ]; then
	sans_font="Source Sans Pro,12,-1,5,50,0,0,0,0,0,Regular"
	mono_font="Hasklig, 12,-1,5,50,0,0,0,0,0,Regular"
	small_font="Source Sans Pro,10,-1,5,50,0,0,0,0,0,Regular"
elif [ "$new_display" = "lap" ]; then
	sans_font="Source Sans Pro,10,-1,5,50,0,0,0,0,0,Regular"
	mono_font="Hasklig, 10,-1,5,50,0,0,0,0,0,Regular"
	small_font="Source Sans Pro,8,-1,5,50,0,0,0,0,0,Regular"
else
	echo "Error; please specify mon or lap"
	exit 1
fi

kdeglobals_update() {
	# shellcheck disable=SC2154
	kwriteconfig5 --file "$XDG_CONFIG_HOME/kdeglobals" "$@"
}

# shellcheck disable=SC2154
if [ "$MACHINE" = "Linux" ] && [ "$XDG_CURRENT_DESKTOP" = "KDE" ]; then
	if command -v kwriteconfig5 >/dev/null; then
		kdeglobals_update --group "General" --key "fixed" "$mono_font"
		kdeglobals_update --group "General" --key "font" "$sans_font"
		kdeglobals_update --group "General" --key "menuFont" "$sans_font"
		kdeglobals_update --group "General" --key "toolBarFont" "$sans_font"
		kdeglobals_update --group "WM" --key "activeFont" "$sans_font"
		kdeglobals_update --group "General" --key "smallestReadableFont" "$small_font"
	else
		echo "kwriteconfig5 not found; please install it to update KDE settings."
	fi
fi

# Config directories
kitty_confdir="$XDG_CONFIG_HOME/kitty"
ff_confdir="$HOME/.mozilla/firefox/default-nightly"
gtk_confdir="$XDG_CONFIG_HOME/gtk-3.0"
termset_confdir="$HOME/Executables/shell-scripts/terminal_cmds"
alacritty_confdir="$XDG_CONFIG_HOME/alacritty"
sway_confdir="$XDG_CONFIG_HOME/sway"

# TODO: update settings for gtk2 and gtk4
if [ -d "$kitty_confdir" ]; then
	cd "$kitty_confdir" \
		&& cat ./kitty_master.conf "./kitty_$new_display.conf" >kitty.conf \
		&& echo "updated kitty settings"
else
	echo "Failed to find kitty config in \"$kitty_confdir\"; skipping."
fi
if [ -d "$ff_confdir" ]; then
	cd "$ff_confdir" \
		&& cat ./user_master.js "./user_$new_display.js" >./user.js \
		&& echo "updated Firefox Nighty settings"
else
	echo "Failed to find Firefox Nightly config in \"$ff_confdir\"; skipping."
fi
if [ -d "$gtk_confdir" ]; then
	cd "$gtk_confdir" \
		&& cat ./settings_master.ini "./settings_$new_display.ini" >settings.ini \
		&& echo "updated gtk3 settings"
else
	echo "Failed to find GTK3 config in \"$gtk_confdir\"; skipping."
fi
if [ -d "$termset_confdir" ]; then
	cd "$termset_confdir" \
		&& cp "./st-vars_$new_display" ./st-vars \
		&& echo "updated st settings"
else
	echo "Failed to find st config in \"$termset_confdir\"; skipping."
fi
if [ -d "$alacritty_confdir" ]; then
	cd "$alacritty_confdir" \
		&& cat ./alacritty_master.yml "./alacritty_$new_display.yml" >alacritty.yml \
		&& echo "updated alacritty settings"
else
	echo "Failed to find alacritty config in \"$alacritty_confdir\"; skipping."
fi

if [ -d "$sway_confdir" ]; then
	cd "$sway_confdir" \
		&& cat ./status_master.toml "./status_$new_display.toml" >status.toml \
		&& cat ./config_master "./config_$new_display" >config \
		&& echo "updated i3status-rs settings"
fi

# [ -n "$SWAYSOCK" ] && swaymsg reload

# vim: filetype=sh
