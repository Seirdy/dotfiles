#!/usr/bin/env dash
# Runs a full update and saves log files.
# Full update includes:
# - system packages with system package manager
# - cargo packages
# - go packages (installed via go-get)
# - pipx packages (python pkgs in their own venvs with entries in $PATH)
# - global pip3 packages (including pipx)
# - global npm packages
# - global luarocks
# - global rubygems
# - flatpaks
# - chromium (via chromium-latest-linux).
# Everything is run simultaneously in the background. The system update is also
# displayed in the interactive session via `tee` so I can enter my root pw and
# watch it happen.
# Log files can be big, so all but the most recent are compressed.
# TODO: Update neovim plugins
# TODO: use npx to contain npm packages
# TODO: determine number of cores and use it to run the max number of parallel
# processes.

set -e

##################
# are we online? #
##################
if ! ping -qc 1 1.1.1.1 >/dev/null 2>&1; then
	echo "not connected"
	exit 1
fi

###########
# Prepare #
###########

# Compress old logs and create directory for new logs #

script_dir="$HOME/Executables/shell-scripts/updates"
cd "$script_dir" || return 1
chmod +x -- *.sh # So I can run the scripts with their shebangs
# shellcheck disable=SC2154
mkdir -p "$XDG_DATA_HOME/update-all/logs" "$GOPATH" && cd "$XDG_DATA_HOME/update-all/logs" || return 1
echo 'Compressing old logs'
fd -t d -x tar -I "lzip --best" -cf "{/}.tar.lz" "{}"
fd -t d -x rm -rf

time_start=$(date '+%s')
mkdir "$time_start"
cd "$time_start" || return 2
log_dir="$PWD"
# Use log_dir in below scripts.
export log_dir
echo # newline

###############
# Arg Parsing #
###############

# On my laptop, I run in lite mode. I rsync binaries from my more powerful desktop to
# my laptop.
if [ "$1" = '-lite' ] || [ "$1" = '--lite' ]; then
	export LITEMODE=1
else
	if [ "$(hostname)" = "rkumarlappie" ]; then
		[ "$1" != "--full" ] && [ "$1" != "-full" ] && export LITEMODE=1
	fi
fi

if [ -z "$LITEMODE" ]; then
	echo 'Running full upgrade, including compilation of large programs'
else
	echo 'Running lite upgrade, skipping compilation of large programs'
fi

#####################
# Logging functions #
#####################

# For both these functions, the input corresponds to a file in
# $script_dir with the ".sh" extension added.
# Each function logs output to $log_dir

# Adding "2>&1" and "< /dev/null" to nohup commands will
# hide nohup output message ("nohup: ignoring input and...")

# Run and log in background
log_bg() {
	echo "Starting update: $1"
	nohup "$script_dir/$1.sh" 2>&1 | ts '%m-%d %H:%M:%S' >"$log_dir/$1-$time_start.log" 2>&1 &
}
get_arch() {
	gcc -c -Q -march=native --help=target | grep -E '^(\s*)?-march=' | awk '{print $2}'
}
ARCH="$(get_arch)"
export ARCH

# used to compile binaries optimized for my laptop's CPU from my desktop
# installs files to ~/Executables/lappie instead of $HOME so I can rsync
# everything to my laptop
log_bg_lap() {
	echo "Starting update for laptop packages: $1"
	CROSS_COMPILING=1 \
		PKG_CONFIG_ALLOW_CROSS=1 \
		ARCH='haswell' \
		CARGO_HOME="$HOME/Executables/lappie/Executables/cargo" \
		PREFIX="$HOME/Executables/lappie/.local" \
		CONFIGPREFIX="$HOME/Executables/lappie/.config" \
		GHQ_ROOT="$HOME/Executables/lappie/Executables/ghq" \
		EXECUTABLES="$HOME/Executables/lappie/Executables" \
		nohup "$script_dir/$1.sh" 2>&1 | ts '%m-%d %H:%M:%S' >"$log_dir/$1_lap-$time_start.log" 2>&1 &
}

# Run and log in foreground (live-preview log file in interactive session)
# Done in foreground so I can enter my password (dnf) and because some things need
# a controlling tty for compilation.
log_fg() {
	echo && echo "Starting update: $1"
	"$script_dir/$1.sh" 2>&1 | ts '%m-%d %H:%M:%S' | tee "$log_dir/$1-$time_start.log"
}

###############
# Run updates #
###############

log_bg 'pip-pipx'     # see https://pipxproject.github.io/pipx/
log_bg 'program-data' # have some programs sync their data
log_bg 'misc'         # misc updates
if [ -z "$LITEMODE" ]; then
	log_bg 'rubygem-luarocks-node' # combine gem+luarocks+npm since they update quickly
	log_bg 'go'                    # build go packages installed with "go get" (slow)
	log_bg 'go-big'                # same as above, but for larger packages (slow)
	log_bg 'cross-cc-programs'     # compile several programs with gcc -O3 -mcpu
	log_bg 'in-containers'         # Updates running inside containers (slow)
	# run these in the foreground to reduce overlapping cpu-intensive updates
	log_fg 'dnf'   # system-wide update, autoremoval, and repo caching.
	log_fg 'zinit' # update zinit + zsh plugins + zpmod (uses tcsetpgrp, compile in foreground)
	log_fg 'cargo' # rust packages (extremely cpu-heavy)
	if [ "$(hostname)" = 'rkumar-dekstop' ]; then
		# cross-compile for laptop
		log_bg_lap 'cargo'
		log_bg_lap 'cross-cc-programs'
		log_bg_lap 'in-containers'
	fi
	log_bg 'stack' # haskell packages (cpu-heavy, memory-intensive, slow)
else
	log_fg 'dnf'
	log_fg 'zinit'
	log_fg 'rubygem-luarocks-node'
fi
log_bg 'no-cross-cc-programs' # compile several programs with gcc -O3 -mcpu
log_bg 'flatpak'              # repair and update user-installed flatpaks

echo "Finished starting all updates; some might still be running in the background."

# vim: filetype=sh
